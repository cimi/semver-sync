#!/usr/bin/env node

var sync = require('../')
  , fs = require('fs')
  , path = require('path')
  , optimist = require('optimist')
  , colors = require('colors')
  , semver = require('semver');

// Node.js: pre-0.8 it was path.existsSync; 0.8 and later it is
// fs.existsSync
var existsSync = fs.existsSync || path.existsSync;

var ERROR = '[ERROR] '.bold.red
  , SUCCESS = '[OK] '.bold.green;

var argv = optimist
    .usage('Synchronizes version numbers accross package.json, component.json and other source files of your choosing.' +
        '\n Usage: ' + 'semver-sync -s [source list] -b [release type].'.bold)
    .option('b', {
        alias: 'bump',
        describe: 'Bump the version number in package.json, component.json and all other specified source files. '
        + 'It can take one of the following values: ' + 'major, minor, patch'.bold
        + '. Alternatively you can specify a custom version that is higher than the current one. If no value is specified, '
        + 'it defaults to ' + 'patch'.bold + '.'})
    .option('s', {
        alias: 'sources',
        describe: 'Declare the JavaScript files in which the version number will be updated. If not explicitly '
        + 'specified, it is read from the package.json "versionedSources" property. If it\'s not present in the '
        + 'package.json and not explicitly specified, only component.json and package.json will be synced. Optional.'})
    .option('v', {
        alias: 'verify',
        describe: 'Verifies that package.json, component.json and all other source files have the same version '
        + 'number and checks if it conforms to the semver specification.'})
    .option('t', {
        alias: 'tag',
        describe: 'Bump the version number, commit the changes to package.json, component.json and all other specified source files '
        + 'and create a git tag with the current version. '
        + 'It can take one of the following values: ' + 'major, minor, patch'.bold
        + '. Alternatively you can specify a custom version that is higher than the current one. If no value is specified, '
        + 'it defaults to ' + 'patch'.bold + '.'})
    .argv
;


if (argv.help || (!argv.verify && !argv.bump && !argv.tag)) {
  console.log('Running ' + 'semver-sync'.bold.green + ' version ' + sync.version.bold.green + '.\n');
  console.log(optimist.help());
  process.exit(0);
}

if (argv.tag && !argv.bump) {
  argv.bump = argv.tag;
}

if (argv.bump === true) {
  argv.bump = 'patch';
}

if (!existsSync('package.json')) {
  console.log(ERROR + 'No package.json found in the current directory, exiting.');
  process.exit(1);
}

var sources = (function () {

  var sources = ['package.json'];
  if (existsSync('component.json')) {
    sources.push('component.json');
  }

  if (argv.sources) {
    sources = sources.concat(argv.sources.split(','));
  } else {
    var packageJSON = JSON.parse(fs.readFileSync('package.json', 'utf-8'));
    if (packageJSON.versionedSources) {
      sources = sources.concat(packageJSON.versionedSources.split(','));
    }
  }
  return sources;
})();

var version = sync.getVersion('package.json').version;

var verify = function (sources, version) {
  var errSources = [];
  sources.forEach(function (source) {
    if (sync.getVersion(source).version !== version) {
      errSources.push(source);
    }
  });

  if (errSources.length > 0) {
    console.log(ERROR + 'Version number is out of sync in ' + errSources.join(', ').red + '.');
    process.exit(1);
  } else {
    console.log(SUCCESS + 'Everything is in sync, the version number is ' + version.bold.green + '.');
  }
}

if (argv.verify || argv.bump || argv.tag) {
  verify(sources, version);
}

if (argv.bump || argv.tag) {
  if (semver.valid(argv.bump) && semver.gt(argv.bump, version)) {
    version = argv.bump;
  } else if (~['major', 'minor', 'patch'].indexOf(argv.bump)) {
    version = semver.inc(version, argv.bump);
  } else {
    console.log(ERROR + 'Invalid release name specified, please use ' + 'major, minor, patch'.bold
      + ', or specify a custom version that is higher than the current one.');
    process.exit(1);
  }

  sync.setVersion(sources, version);
  console.log(SUCCESS + 'Version number was updated to ' + version.bold.green + ' in '
    + sources.join(', ').bold + '.');
}

if (argv.tag) {
  sync.commitSourcesAndCreateTag(sources, version, function () {
    console.log(SUCCESS + 'Files have been commited and tag ' + ('v' + version).bold.green + ' was created.');
  });
}
